-- Initial clash-riscv.cabal generated by cabal init.  For further
-- documentation, see http://haskell.org/cabal/users-guide/

name:                clash-riscv
version:             0.1.0.0
synopsis:            RISC-V core written in Clash
description:         RISC-V core written in Clash
license:             BSD3
license-file:        LICENSE
author:              Adam Walker
maintainer:          adamwalker10@gmail.com
copyright:           2017 Adam Walker
category:            Hardware
build-type:          Simple
extra-source-files:  ChangeLog.md, Readme.md
cabal-version:       >=1.10

library
    exposed-modules:     Core.Pipeline, Core.Debug, Core.Mem, Core.RegFile, Core.Compare, Core.ALU, Core.Decode, Cache.ICache, Cache.Replacement, Cache.PseudoLRUTree
    -- other-modules:
    other-extensions:    DataKinds, NoImplicitPrelude, TypeOperators, DeriveGeneric, DeriveAnyClass, RecordWildCards, OverloadedStrings, BinaryLiterals, ScopedTypeVariables, TemplateHaskell
    build-depends:
        base          >=4.9  && <5,
        riscv-isa     >=0.1  && <0.2,
        clash-prelude >=1.2  && <1.4,
        text          >=1.2  && <1.3,
        deepseq       >=1.4  && <1.5,
        hspec         >=2.3  && <2.8,
        singletons    >=2.2  && <2.8,
        ghc-typelits-natnormalise,
        ghc-typelits-knownnat,
        ghc-typelits-extra
    hs-source-dirs:      src
    default-language:    Haskell2010
    default-extensions:
        ScopedTypeVariables,
        NoImplicitPrelude,
        TypeOperators,
        DataKinds,
        FlexibleContexts,
        TypeApplications,
        BinaryLiterals,
        DeriveGeneric,
        DeriveAnyClass,
        GADTs,
        KindSignatures,
        TypeFamilies
  ghc-options:
    -- -Wall -Wcompat

    -- Plugins to support type-level constraint solving on naturals
    -fplugin GHC.TypeLits.Extra.Solver
    -fplugin GHC.TypeLits.Normalise
    -fplugin GHC.TypeLits.KnownNat.Solver

    -- Clash needs access to the source code in compiled modules
    -fexpose-all-unfoldings

    -- Worker wrappers introduce unstable names for functions that might have
    -- blackboxes attached for them. You can disable this, but be sure to add
    -- a no-specialize pragma to every function with a blackbox.
    -fno-worker-wrapper

Test-Suite test
    type:                exitcode-stdio-1.0
    main-is:             TestSuite.hs
    other-modules:       CacheTest, Program, TestUtils
    build-depends:
        base             >=4.6   && <5,
        clash-prelude,
        hspec,
        QuickCheck,
        riscv-isa,
        clash-riscv
    hs-source-dirs:      test
    default-language:    Haskell2010
    default-extensions:
        ScopedTypeVariables,
        TypeOperators,
        DataKinds,
        FlexibleContexts,
        TypeApplications,
        BinaryLiterals,
        GADTs,
        KindSignatures,
        TypeFamilies,
        RecordWildCards



-- copied from clash-example-project
executable clash
  main-is: bin/Clash.hs
  Build-Depends: base, clash-ghc, clash-riscv
  if !os(Windows)
    ghc-options: -dynamic
  default-language:    Haskell2010
executable clashi
  main-is: bin/Clashi.hs
  if !os(Windows)
    ghc-options: -dynamic
  build-depends: base, clash-ghc, clash-riscv
  default-language:    Haskell2010
